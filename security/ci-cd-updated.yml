name: FLORA CI/CD Pipeline - Updated

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Excluir combinaciones problemáticas
          - os: ubuntu-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ libssl-dev libffi-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl libffi
    
    - name: Install Python dependencies
      run: |
        cd flora/api
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install security testing dependencies
      run: |
        pip install bandit safety semgrep
    
    - name: Run security tests
      run: |
        cd flora/security
        python run_tests.py --target-url http://localhost:8000 --api-key test_api_key_12345678901234567890
      continue-on-error: true
    
    - name: Run API tests
      run: |
        cd flora/security
        python test_api_simple.py
      continue-on-error: true
    
    - name: Security scan with Bandit
      run: |
        bandit -r flora/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Security scan with Safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7

  build:
    needs: test
    runs-on: ubuntu-latest
    if: always() && (needs.test.result == 'success' || needs.test.result == 'failure')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t flora/api:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name flora-test flora/api:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop flora-test

  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && always() && (needs.test.result == 'success' || needs.test.result == 'failure')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos de despliegue a staging

  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && always() && (needs.test.result == 'success' || needs.test.result == 'failure')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aquí irían los comandos de despliegue a producción

  security-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd flora/api
        pip install -r requirements.txt
        cd ../security
        pip install -r requirements-security.txt
    
    - name: Run comprehensive security audit
      run: |
        cd flora/security
        python run_tests.py --target-url http://localhost:8000 --api-key test_api_key_12345678901234567890
      continue-on-error: true
    
    - name: Upload security audit reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-reports
        path: |
          flora/security/*_report_*.json
        retention-days: 30
    
    - name: Generate security summary
      run: |
        echo "Security audit completed. Check artifacts for detailed reports."
        echo "## Security Audit Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Tests executed: $(ls flora/security/*_report_*.json 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- Reports uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
