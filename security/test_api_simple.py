#!/usr/bin/env python3
"""
FLORA API Test Simple
Script para probar la API de FLORA de manera simple
"""

import requests
import json
import time
import sys
from datetime import datetime

def test_api_connection(base_url="http://localhost:8000"):
    """Probar conexi√≥n b√°sica a la API"""
    print("üß™ Probando conexi√≥n a la API...")
    
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API respondiendo correctamente")
            return True
        else:
            print(f"‚ùå API respondiendo con c√≥digo: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_encryption(base_url="http://localhost:8000", api_key="test_api_key_12345678901234567890"):
    """Probar endpoint de encriptaci√≥n"""
    print("üîê Probando endpoint de encriptaci√≥n...")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "data": "Hola FLORA desde API test"
    }
    
    try:
        response = requests.post(
            f"{base_url}/api/v1/encrypt",
            headers=headers,
            json=data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Encriptaci√≥n exitosa")
            print(f"   Key ID: {result.get('key_id', 'N/A')}")
            print(f"   Algorithm: {result.get('algorithm', 'N/A')}")
            print(f"   Security Level: {result.get('security_level', 'N/A')}")
            return result
        else:
            print(f"‚ùå Error en encriptaci√≥n: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def test_decryption(base_url="http://localhost:8000", api_key="test_api_key_12345678901234567890", encrypt_result=None):
    """Probar endpoint de desencriptaci√≥n"""
    print("üîì Probando endpoint de desencriptaci√≥n...")
    
    if not encrypt_result:
        print("‚ùå No hay datos encriptados para probar")
        return False
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "key_id": encrypt_result.get("key_id"),
        "encrypted_data": encrypt_result.get("encrypted_data")
    }
    
    try:
        response = requests.post(
            f"{base_url}/api/v1/decrypt",
            headers=headers,
            json=data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Desencriptaci√≥n exitosa")
            print(f"   Datos desencriptados: {result.get('decrypted_data', 'N/A')}")
            print(f"   Key ID: {result.get('key_id', 'N/A')}")
            print(f"   Algorithm: {result.get('algorithm', 'N/A')}")
            return True
        else:
            print(f"‚ùå Error en desencriptaci√≥n: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_status(base_url="http://localhost:8000", api_key="test_api_key_12345678901234567890"):
    """Probar endpoint de estado"""
    print("üìä Probando endpoint de estado...")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(
            f"{base_url}/api/v1/status",
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Estado obtenido correctamente")
            print(f"   Status: {result.get('status', 'N/A')}")
            print(f"   Version: {result.get('version', 'N/A')}")
            print(f"   Security Level: {result.get('security_level', 'N/A')}")
            print(f"   Timestamp: {result.get('timestamp', 'N/A')}")
            return True
        else:
            print(f"‚ùå Error obteniendo estado: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_authentication(base_url="http://localhost:8000"):
    """Probar autenticaci√≥n con API key inv√°lida"""
    print("üîë Probando autenticaci√≥n con API key inv√°lida...")
    
    headers = {
        "Authorization": "Bearer invalid_api_key",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(
            f"{base_url}/api/v1/status",
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 401:
            print("‚úÖ Autenticaci√≥n correctamente rechazada")
            return True
        else:
            print(f"‚ùå Error en autenticaci√≥n: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_rate_limiting(base_url="http://localhost:8000", api_key="test_api_key_12345678901234567890"):
    """Probar rate limiting"""
    print("‚è±Ô∏è Probando rate limiting...")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    # Hacer m√∫ltiples requests r√°pidos
    for i in range(5):
        try:
            response = requests.get(
                f"{base_url}/api/v1/status",
                headers=headers,
                timeout=5
            )
            
            if response.status_code == 429:
                print(f"‚úÖ Rate limiting funcionando (request {i+1})")
                return True
            elif response.status_code == 200:
                print(f"   Request {i+1}: OK")
            else:
                print(f"   Request {i+1}: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"   Request {i+1}: Error - {e}")
        
        time.sleep(0.1)  # Peque√±a pausa entre requests
    
    print("‚ö†Ô∏è Rate limiting no activado (puede ser normal)")
    return True

def main():
    """Funci√≥n principal"""
    print("FLORA API Test Simple")
    print("=" * 50)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    api_key = "test_api_key_12345678901234567890"
    
    tests_passed = 0
    total_tests = 6
    
    # 1. Probar conexi√≥n
    if test_api_connection(base_url):
        tests_passed += 1
        print("‚úÖ Test de conexi√≥n: PAS√ì")
    else:
        print("‚ùå Test de conexi√≥n: FALL√ì")
        print("   Aseg√∫rate de que la API est√© ejecut√°ndose")
        return 1
    
    # 2. Probar autenticaci√≥n
    if test_authentication(base_url):
        tests_passed += 1
        print("‚úÖ Test de autenticaci√≥n: PAS√ì")
    else:
        print("‚ùå Test de autenticaci√≥n: FALL√ì")
    
    # 3. Probar estado
    if test_status(base_url, api_key):
        tests_passed += 1
        print("‚úÖ Test de estado: PAS√ì")
    else:
        print("‚ùå Test de estado: FALL√ì")
    
    # 4. Probar encriptaci√≥n
    encrypt_result = test_encryption(base_url, api_key)
    if encrypt_result:
        tests_passed += 1
        print("‚úÖ Test de encriptaci√≥n: PAS√ì")
    else:
        print("‚ùå Test de encriptaci√≥n: FALL√ì")
    
    # 5. Probar desencriptaci√≥n
    if encrypt_result and test_decryption(base_url, api_key, encrypt_result):
        tests_passed += 1
        print("‚úÖ Test de desencriptaci√≥n: PAS√ì")
    else:
        print("‚ùå Test de desencriptaci√≥n: FALL√ì")
    
    # 6. Probar rate limiting
    if test_rate_limiting(base_url, api_key):
        tests_passed += 1
        print("‚úÖ Test de rate limiting: PAS√ì")
    else:
        print("‚ùå Test de rate limiting: FALL√ì")
    
    # Resumen final
    print("\n" + "=" * 50)
    print("RESUMEN FINAL")
    print("=" * 50)
    print(f"Tests pasados: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("üéâ TODOS LOS TESTS PASARON")
        print("‚úÖ API funcionando correctamente")
        return 0
    elif tests_passed >= 4:
        print("‚ö†Ô∏è La mayor√≠a de tests pasaron")
        print("‚úÖ API funcionando con algunas advertencias")
        return 0
    else:
        print("‚ùå Varios tests fallaron")
        print("‚ö†Ô∏è Revisar configuraci√≥n de la API")
        return 1

if __name__ == "__main__":
    sys.exit(main())
